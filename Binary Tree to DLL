// C++ CODE

    Node *head = NULL, *lastNode = NULL;
    void help(Node *root){
        if(!root)return;
        help(root->left);
        if(!head)head=root;
        if(lastNode)lastNode->right=root;
        root->left=lastNode;
        lastNode=root;
        help(root->right);
    }
    Node* bToDLL(Node* root) {
        // code here
        help(root);
        return head;
    }


// JAVA CODE

    Node head = null, lastNode = null;
    void help(Node root){
        if(root==null)return;
        help(root.left);
        if(head==null)head=root;
        if(lastNode!=null)lastNode.right=root;
        root.left=lastNode;
        lastNode=root;
        help(root.right);
    }
    //Function to convert binary tree to doubly linked list and return it.
    Node bToDLL(Node root)
    {
	  //  Your code here	
	    help(root);
	    return head;
    }


// Python
class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

head = None
lastNode = None

def help(root):
    global head, lastNode
    if not root:
        return
    
    help(root.left)
    
    if not head:
        head = root
    if lastNode:
        lastNode.right = root
    root.left = lastNode
    lastNode = root
    
    help(root.right)

def bToDLL(root):
    help(root)
    return head

root = Node(10)
root.left = Node(5)
root.right = Node(20)
root.left.left = Node(2)
root.left.right = Node(7)
root.right.right = Node(30)

dll_head = bToDLL(root)

current = dll_head
while current:
    print(current.data, end=" ")
    current = current.right



// Time Complexity:- O(N)
// Space Complexity:- O(H)
